@model RDC.ViewModels.TaskViewModel

@{
    ViewBag.Title = "Edit";
    Layout = null;
}


@using (Html.BeginForm("Edit", "Tasks", FormMethod.Post, new { onsubmit = "return postTask(this);" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)
    
    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @id = "ckedit" })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Date, new { @class = "form-control datepicker", placeholder = "Enter Drop-off date here...",  autocomplete = "off" })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.Status, new SelectList(Model.StatusList), "Select Status Type", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-4 d-flex justify-content-between">
                <input type="submit" value="Save" class="btn btn-default btn-outline-primary" />
                <a class="btn btn-success text-light" onclick="renameTabTitle('taskConfigTab', 'New Task');getAddNewTaskTabContent()">New Task</a>
            </div>
        </div>
    </div>
}





